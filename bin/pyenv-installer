#!/usr/bin/env bash
# vim: set et sw=2 sts=2 ts=2 :
#
# Install pyenv w/ virtualenv
#
# Environment variables this script uses:
#
# XDG_DATA_HOME (set by system)
#   You'll see this mentioned as recommended in place of $HOME. May not always
#   be set though. Typically on linux its "${HOME}/.local/share"
#
# PYENV_DEBUG=
#   if it has any value then turns on debugging
#
# PYENV_ROOT="${HOME}/.pyenv"
#   where pyenv is installed too. alternative suggestion is
#   "${XDG_DATA_HOME}/pyenv"
#
# PYENV_SKIP_UPDATE=
#   if on ubuntu this will install the dependencies needed. Set this to any
#   value, like 'yes', to skip installing these.
#
# PYENV_INITIAL_VERSION=none
#   initial version of python to install.  Accepts 'none', any version that
#   pyenv knows of, or 'system' which will detect the current version of python
#   the system has and install that with pyenv.
#
# BUG: Currently there's no way to set the default to 'system' as in "by default
# use the version of python that is installed on the system and not pyenv".
# Mainly because you have to install some pyenv version to get virtualenv
#

set -e
[ -n "${PYENV_DEBUG}" ] && set -x

PYENV_ROOT="${PYENV_ROOT:-${HOME}/.pyenv}"
PYENV_INITIAL_VERSION="${PYENV_INITIAL_VERSION:-none}"

if [ "${PYENV_INITIAL_VERSION}" == "system" ]; then
  system_python="$(python -V 2>&1)"
  PYENV_INITIAL_VERSION="${system_python##* }"
fi

{ echo
  echo "Proceeding with the following settings in 5 seconds"
  echo "Press control-c to cancel and make changes"
  echo
  echo "PYENV_ROOT: ${PYENV_ROOT}"
  echo "PYENV_SKIP_UPDATE: ${PYENV_SKIP_UPDATE:-(blank)}"
  echo "PYENV_INITIAL_VERSION: ${PYENV_INITIAL_VERSION}"
  echo
} >&2

sleep 5

if [ -z "${PYENV_SKIP_UPDATE}" ]; then
  if [ -f '/etc/os-release' ]; then
    if [ $(grep -c "ubuntu" /etc/os-release) -gt 0 ]; then
      echo "Installing dependencies for ubuntu" >&2
      echo "You may be prompted for sudo password" >&2
      sudo apt-get update
      sudo apt-get install -y make build-essential libssl-dev zlib1g-dev \
        libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm git
    else
      echo "unable to determine OS based off /etc/os-release" >&2
    fi
  elif [ -f '/etc/redhat-release' ]; then
    echo "Installing dependencies for redhat flavors" >&2
    echo "You may be prompted for sudo password" >&2
    sudo yum install -y gcc patch zlib-devel bzip2 bzip2-devel readline-devel \
      sqlite sqlite-devel openssl-devel git
  elif [ "$(uname -s)" == "Darwin" ]; then
    echo 'On OS X use homebrew. See readme for instructions.' >&2
    exit 1
  else
    echo "unable to determine OS" >&2
    exit 1
  fi
fi

shell="$1"
if [ -z "${shell}" ]; then
  shell="$(ps c -p "${PPID}" -o 'ucomm=' 2>/dev/null || true)"
  shell="${shell##-}"
  shell="${shell%% *}"
  shell="$(basename "${shell:-$SHELL}")"
fi

colorize() {
  if [ -t 1 ]; then printf "\e[%sm%s\e[m" "$1" "$2"
  else echo -n "$2"
  fi
}

checkout() {
  [ -d "$2" ] || git clone "$1" "$2"
}

# Changes "/home/foo/whatever" to "$HOME/whatever"
filter_home() {
  echo "$1" | sed -e "s,$HOME,\$HOME,"
}

if ! command -v git 1>/dev/null; then
  echo "pyenv: Git is not installed, can't continue." >&2
  exit 1
fi

checkout "https://github.com/yyuu/pyenv.git"            "${PYENV_ROOT}"
checkout "https://github.com/yyuu/pyenv-doctor.git"     "${PYENV_ROOT}/plugins/pyenv-doctor"
#checkout "https://github.com/yyuu/pyenv-installer.git"  "${PYENV_ROOT}/plugins/pyenv-installer"
# pip-rehash not needed as of 20141211 release
#checkout "https://github.com/yyuu/pyenv-pip-rehash.git" "${PYENV_ROOT}/plugins/pyenv-pip-rehash"
checkout "https://github.com/yyuu/pyenv-update.git"     "${PYENV_ROOT}/plugins/pyenv-update"
checkout "https://github.com/yyuu/pyenv-virtualenv.git" "${PYENV_ROOT}/plugins/pyenv-virtualenv"
checkout "https://github.com/yyuu/pyenv-which-ext.git"  "${PYENV_ROOT}/plugins/pyenv-which-ext"

if ! command -v pyenv 1>/dev/null; then
  { echo
    colorize 1 "WARNING"
    echo ": seems you still have not added 'pyenv' to the load path."
    echo
  } >&2

  case "${shell}" in
  bash )
    profile="${HOME}/.bash_profile"
    ;;
  zsh )
    profile="~/.zshrc"
    ;;
  ksh )
    profile="~/.profile"
    ;;
  fish )
    profile="~/.config/fish/config.fish"
    ;;
  * )
    profile="your profile"
    ;;
  esac

  pyenv_path="$(filter_home "${PYENV_ROOT}")"
  workon_home_path="$(filter_home "${WORKON_HOME}")"
  project_home_path="$(filter_home "${PROJECT_HOME:-$HOME/code}")"

  if [ "${PYENV_INITIAL_VERSION}" == 'none' ]; then
    { echo "# Load pyenv automatically by adding"
      echo "# the following to $(filter_home "${profile}"):"
      echo "# if you set PYENV_INITIAL_VERSION this is done for you"
      echo
      case "${shell}" in
      fish )
        echo "set -x PATH \"${pyenv_path}/bin\" \$PATH"
        echo 'status --is-interactive; and . (pyenv init -|psub)'
        echo 'status --is-interactive; and . (pyenv virtualenv-init -|psub)'
        ;;
      * )
        echo "# See readme file for a more enhanced version"
        echo "export PYENV_ROOT=\"${pyenv_path}\""
        echo "export PATH=\"\${PYENV_ROOT}/bin:\${PATH}\""
        echo "eval \"\$(pyenv init -)\""
        echo "eval \"\$(pyenv virtualenv-init -)\""
        echo
        ;;
      esac
    } >&2
  else
    if [ "${shell}" != 'bash' ]; then
      echo "Setting up initial version only supports bash shells currently" >&2
      exit 1
    fi

    { echo >>"${profile}"
      echo '# Begin lines added by pyenv-installer'
      echo "export PYENV_ROOT=\"${pyenv_path}\""
      echo 'export PATH="${PYENV_ROOT}/bin:${PATH}"'
      echo 'if command -v pyenv 1>/dev/null; then'
      echo "    # virtualenv modifies the PROMPT_COMMAND by placing it's command in front of"
      echo '    # what was previously there. This swaps it so previous prompt command is'
      echo "    # first and then virtualenv's. If this causes problems for you then remove"
      echo '    # the lines before and after the evals'
      echo '    #'
      echo '    # Skip this if we already loaded it'
      echo '    if [[ "${PYENV_LOADED:-no}" != "yes" ]]; then'
      echo '        _previous_prompt_command="${PROMPT_COMMAND}"'
      echo '        unset PROMPT_COMMAND'
      echo '        eval "$(pyenv init -)"'
      echo '        eval "$(pyenv virtualenv-init -)"'
      echo '        export PROMPT_COMMAND="${_previous_prompt_command};${PROMPT_COMMAND}"'
      echo '        unset _previous_prompt_command'
      echo '        export PYENV_LOADED="yes"'
      echo '    fi'
      echo 'fi'
      echo '# End lines added by pyenv-installer'
    } >>"${profile}"
    source "${profile}"
    if ! command -v pyenv 1>/dev/null; then
      echo "pyenv still doesn't exist, aborting install" >&2
      exit 1
    fi
  fi
fi   # end if pyenv not found

if [ "${PYENV_INITIAL_VERSION}" != 'none' ]; then
  echo "Starting install of ${PYENV_INITIAL_VERSION}" >&2
  echo "You may not see any output for a while" >&2
  pyenv install ${PYENV_INITIAL_VERSION}
  pyenv global ${PYENV_INITIAL_VERSION}
fi

{ echo
  echo "Finished install: relogin or \`source ${profile}\` to get started"
  echo "Have a nice day!"
} >&2

exit 0
